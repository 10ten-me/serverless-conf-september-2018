# generated by @ng-toolkit/serverless
service: serverless-conf-app

plugins:
  - serverless-apigw-binary

provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 192
  timeout: 10
  stage: production
  region: eu-central-1

package:
  exclude:
   - src/**
   - node_modules/**
   - firebug-lite/**
   - e2e/**
   - coverage/**
   - '!node_modules/aws-serverless-express/**'
   - '!node_modules/binary-case/**'
   - '!node_modules/type-is/**'
   - '!node_modules/media-typer/**'
   - '!node_modules/mime-types/**'
   - '!node_modules/mime-db/**'

functions:
  api:
    handler: lambda.universal
    events:
      - http: ANY {proxy+}
      - http: ANY /

custom:
  apigwBinary:
    types:
      - '*/*'
  stages:
    - dev
    - staging
    - prod
  domain:
    dev: localhost
    staging: serverless-conf-staging.10ten.ae
    prod: serverless-conf.10ten.ae
  zone:
    dev: localhost
    staging: "ZCXVCBVNBMGILHIOIHIO"
    prod: "ALSKDJFHGFJFJFKIFOI"
  certificate:
    dev: ""
    staging: "arn:aws:acm:us-east-1:XXXX"
    prod: "arn:aws:acm:us-east-1:XXXX"

resources:
  Resources:
    TravelInsuranceDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        Tags:
          - Key: "stage"
            Value: "${self:provider.stage}"
        DistributionConfig:
          Aliases:
            - "${self:custom.domain.${self:provider.stage}}"
          HttpVersion: http2
          IPV6Enabled: True
          Origins:
          - DomainName:
              Fn::Join:
                - ""
                - - Ref: ApiGatewayRestApi
                  - ".execute-api.${self:provider.region}.amazonaws.com"
            OriginPath: "/${self:provider.stage}"
            Id: ${self:service}-${self:provider.stage}
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: https-only
          Enabled: 'true'
          Comment: "CDN for ${self:service}-${self:provider.stage}"
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId: "${self:service}-${self:provider.stage}"
            MaxTTL: 1200
            MinTTL: 0
            DefaultTTL: 600
            Compress: True
            ForwardedValues:
              QueryString: 'true'
              Cookies:
                Forward: all
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.certificate.${self:provider.stage}}
            SslSupportMethod: sni-only
            MinimumProtocolVersion: "TLSv1.2_2018"
    TravelInsuranceDomain:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: "${self:custom.zone.${self:provider.stage}}"
        RecordSets:
        - Name: "${self:custom.domain.${self:provider.stage}}."
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName:
              "Fn::GetAtt": [ TravelInsuranceDistribution, DomainName ]
      DependsOn: TravelInsuranceDistribution
    CDNSSMParameter:
      Type: "AWS::SSM::Parameter"
      Properties:
        Name: "/${self:provider.stage}/travel_insurance/travel_insurance_app_cdn"
        Type: String
        Value:
          Ref: TravelInsuranceDistribution
      DependsOn: TravelInsuranceDistribution
  Outputs:
    ApiUrl:
      Description: "The API Gateway URL"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"
    ApiDomain:
      Description: "The API Domain"
      Value:
        Fn::Join:
          - ""
          - - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com"
